#!/usr/bin/ruby

require 'rainbow'
require 'pty'
require 'trollop'
require 'fileutils'

@opt_args = "-stats -strip-debug-declare -globalopt -globaldce -instcombine -tailcallelim -licm -sink -adce -dse -mem2reg -scalarrepl -instnamer -dataflow"

def init
  opts = Trollop::options do
    opt :graph, "Creates flow graphs per function. Graphviz's DOT must be available."
    opt "use-taintlib", "Use previous analysis results stored in a taint library directory named `taintlib/`. Warning: this may lead to missing global variables if the library code is not linked to your BC file (see llvm-link)."
    opt :file, "The BC file to be analysed. For Clang use `-emit-llvm` and `-c` to avoid the linking phase. If you provide debug information via `-g`, Rheo can use file names and line numbers of single instructions in its output.", type: String
    opt :exclude, "A file with exclusion information. One function name per line for all functions that should be approximated by the heuristic even if the function is non-external (= code is available). Use this to work around functions with not supported instructions.", type: String
    opt :request, "A file with slicing information. One function name per line for all functions you are interested in. Dependencies are resolved automatically.", type: String
  end

  @output_dir = "output"
  create_output_dir()

  @build_graphs = (opts[:graph])
  @opt_args << " --graph" if @build_graphs

  @file = opts[:file]
  @file = File.absolute_path(@file)

  @opt_args << " --request='#{File.absolute_path(opts[:request])}'" if opts[:request]
  @opt_args << " --exclude='#{File.absolute_path(opts[:exclude])}'" if opts[:exclude]

  use_taintlib = opts.has_key?("use-taintlib")

  if use_taintlib and Dir.exist?("taintlib")
    `cp -R taintlib #{@output_dir}/` 
  end

  puts " * Compiling RHEO"
  `make -j4 ENABLE_OPTIMIZED=1`
end

def create_output_dir
  FileUtils.rm_rf(@output_dir)
  sleep 0.1 # Avoid locks when recreating dir
  FileUtils.mkdir(@output_dir)
end

def analyse
  FileUtils.cd(@output_dir) do
    log_file = File.open("analysis.log", "w")
    puts " * Preprocessing BC file"

    opt_cmd = "opt -load ../Release+Asserts/lib/dataflow.so #{@opt_args} < #{@file} -o /dev/null 2>&1"
    begin
      PTY.spawn(opt_cmd) do |r, w, pid|
        begin
          externals = []
          function_count = i_th_func = 1
          arg_count = 0
          arg_no = 0

          r.each do |line|
            log_file.puts line
            log_file.flush

            if line =~ /__info:arg_count:(.*)/
              arg_count = $1.to_i
              print "%0#{arg_count.to_s.length}d/%d" % [0, arg_count]
            end

            if line =~ /__info:arg_no:(.*)/
              arg_no = $1.to_i
              print "\b" * (arg_count.to_s.length*2 + 1)
              print "%0#{arg_count.to_s.length}d/%d" % [arg_no, arg_count]
            end

            if line =~ /__log:start:(.*)/
              print " (%0#{function_count.to_s.length}d/%d) ".color("#888888") % [i_th_func, function_count] + $1.strip.bright + " ... "
            end
            
            if line =~ /__taints:(.*)\((.*)\)/
              taints = ($2 || "").strip
              taints = taints[0..40] + "..." + " [and many more]".color(:magenta) if taints.length > 50
              taints = " " * 10 if taints.length == 0
              print "\b" * (arg_count.to_s.length*2 + 1)
              puts "done".color(:green) +  "  #{taints}".color("#aaaaaa")
              i_th_func += 1
            end

            if line =~ /__defer:(.*):(.*)/
              dependency = ($2 || "").strip
              dependency_string = dependency ? " (waiting for `#{dependency}` to complete)" : ""
              print "\b" * (arg_count.to_s.length*2 + 1)
              puts "deferred".color(:yellow) + dependency_string.color("#333333")
            end

            if line =~ /__error:(.*)/
              print "\b" * (arg_count.to_s.length*2 + 1)
              puts "error: #{$1.strip}".color(:red)
            end

            if line =~ /__enqueue:start/
              puts " * Inspecting Call Graph"
            end
            
            if line =~ /__enqueue:end/
              puts " * External functions that will be handled by heuristic: " + externals.join(", ").color(:blue)
              puts
            end

            if line =~ /__enqueue:count:(.*)/
              puts " # Functions to analyse: #{$1.strip}".bright
              puts
              function_count = $1.to_i
            end

            if line =~ /__external:(.*)/
              externals << $1.strip
            end
          end
        rescue Errno::EIO  
        end  
      end
    rescue PTY::ChildExited => e  
    end  

    log_file.close
  end
end

def graphs
  return unless @build_graphs

  FileUtils.cd(@output_dir) do 
    Dir.glob("*.dot").each do |file|
      puts " * Creating flow graph: #{file}"
      `dot -Tpdf #{file} > #{File.basename(file, ".*")}.pdf`
    end
  end
end


init
analyse
graphs
